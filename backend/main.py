import cv2
from cvzone.HandTrackingModule import HandDetector
import asyncio, json, websockets
import base64

# Webcam
cap = cv2.VideoCapture(1)  # 0 refers to default webcam
cap.set(3, 1280)  # Prop id 3 refers to video width
cap.set(4, 720)  # Prop id 4 refers to video height

# Hand Detector
detector = HandDetector(maxHands=1, detectionCon=0.8)


# Obtain landmark data and send to frontend via websocket
async def hand_landmarks(websocket):
    while True:
        # Get the frame from the webcam
        success, img = cap.read()
        if not success:
            break  # break if program fails to grab frame or recognize webcam
        hands, img = detector.findHands(img)  # hands contains information about hands
        data = {}

        # Landmark values - (x,y,z) * 21 --> total number of values
        if hands:
            # Get the first hand
            hand = hands[0]
            # Get the landmark list (list of 21 lists of landmark cords)
            lmList = hand["lmList"]
            data["landmarks"] = lmList

        # cv2.imshow("Image", img)  # imshow short for image show, "Image" is window name, img is images
        # cv2.waitKey(1)  # Make video refresh every 1 ms

        await websocket.send(json.dumps(data))
        await asyncio.sleep(0.03)


# Obtain video frame data and send to frontend via websocket
async def frame_data(websocket):
    while True:
        success, img = cap.read()
        img = cv2.flip(img, 1)
        if not success:
            break
        hands, img = detector.findHands(img)

        # Encode the img as base64
        # Frames generated by OpenCV are of binary data, and for HTML, must convert it into text data   
        _, img_data = cv2.imencode(".jpg", img)  # Converts the image into a buffer image object, ready to be converted to base64
        base64_img = base64.b64encode(img_data).decode("utf-8")

        await websocket.send(base64_img)
        await asyncio.sleep(0.03)


async def landmark_data_server():
    server = await websockets.serve(hand_landmarks, "localhost", 3000)
    await server.wait_closed() # Run the server until closed


async def frame_data_server():
    server = await websockets.serve(frame_data, "localhost", 4000)
    await server.wait_closed() # Run the server until closed


async def main():
    # Run servers concurrently using asyncio.gather()
    await asyncio.gather(
        landmark_data_server(),
        frame_data_server()
    )
    

asyncio.run(main())
